#!/usr/bin/env ruby
#
# Copyright 2013 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Synopsis
========

#{exec_name}: Remove orphan process previsoly associated
              to an GridEngine job.

Options
-------

  --help, -h
    Show this help information.
  --debug, -d
    Show stacktraces in case of errors.
EOF

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  options = OpenStruct.new
  options.debug = false

  log = Logger.new(STDOUT)
  log.formatter = proc do |severity, datetime, progname, msg|
      "[#{datetime.strftime("%Y-%m-%d %H:%M:%S")}] #{severity}: #{msg}\n"
  end
  log.level = Logger::INFO

  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      options.debug = true
      log.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    end
  end
  
  # Get the list of jobs currently running on this node 
  hostname = `hostname -f`.chop
  jobs = `qhost -h #{hostname} -j | awk --posix '/^[ ]*[0-9].*/ { print $1 }'`
  jobs = jobs.split("\n").uniq.map { |id| id.to_i  }

  # Check all processes existing on this node 
  Dir.glob('/proc/[0-9]*').each do |dir|
    next unless File.exists? "#{dir}/environ"
    # Check if this process is a Gridengine job
    job_id = `strings #{dir}/environ | grep JOB_ID`
    next if job_id.empty?
    # Get the job ID
    job_id = job_id.split('=')[1].to_i
    process = dir.split('/')[-1]
    user = `ps -p #{process} -o user`.split("\n")[1]
    log.debug("#{job_id} - #{user}##{process}")
    next if jobs.include? job_id
    # In case orphan processes are found
    log.info("SIGKILL -- Orphan process found #{job_id} - #{user}##{process}")
    `kill -KILL #{process}`
  end

  `du --max-depth=1 -k /tmp/* | sort -n | cut -f2 | xargs ls -ld | tr -s ' ' | cut -d' ' -f 3 | uniq | xargs -I {} bash -c 'if ! ps -u {} 1>- ; then echo {}; fi'`.split("\n").each do |user|
    log.info("REMOVE -- Orphan directories in /tmp for user #{user}.")
    `find /tmp -user #{user}`.split("\n").each do |dir|
      log.debug("  #{dir}")
      system "rm -rf #{dir}"
    end
  end



rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
