#!/usr/bin/env ruby
#
# Copyright 2013 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'ostruct'
require 'getoptlong' 
require 'logger'

exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Synopsis
========

  #{exec_name} [options] command

Commands
--------

  orphan
    Remove orphan processes originally spawned by GridEngine.
  temp
    Remove data in /tmp form users not running GridEngine jobs.

Options
-------

  --dry-run, -d
    Show what would be done.
  --verbose, -v
    Print more information.
  --help, -h
    Show this help information.
  --debug, -D
    Show stacktraces in case of errors.
EOF

module Gengine

  # Returns a list of users with running processes originally
  # spawned within an GridEngine environment.
  def self.users
    list = Array.new
    self.parse_proc.each_pair do |pid,meta|
      user = meta[1]
      list << user unless list.include? user
    end
    return list
  end

  # Returns a list of all user and GridEngine job IDs 
  # on localhost known to the GridEngine master.
  def self.jobs
    list = Hash.new
    $log.debug("Request job information for [localhost] from GridEngine master.")
    `qhost -h $(hostname -f) -j | awk --posix '/^[ ]*[0-9].*/ { print $1,$4 }'`.split("\n").each do |line|
       jid,user = line.split(' ')
       list[jid] = user
    end
    $log.debug("#{list.keys.length} job from #{list.values.uniq.length} users found.")
    return list
  end

  # Returns a list of all processes and GridEngine job IDs
  # for a given user.
  def self.processes(user)
    list = Hash.new
    self.parse_proc.each do |pid,meta|
      # get all process of a specific user
      next unless meta[1] == user
      list[pid] = meta[0] # job ID
    end
    return list
  end

  # Parse all process directories in /proc and identify
  # processes spawned from an GridEngine environment.
  # Returns a list of all process IDs with associated
  # GridEngine job ID, as well as the user executing this job. 
  def self.parse_proc
    list = Hash.new
    Dir.glob('/proc/[0-9]*').each do |dir|
      next unless File.exists? "#{dir}/environ"
      # Check if this process is a GridEngine job
      jid = `strings #{dir}/environ | grep JOB_ID`
      next if jid.empty?
      jid = jid.split('=')[1].to_i
      pid = dir.split('/')[-1].to_i
      uid = `cat #{dir}/status | grep '^Uid:'`.split("\t")[1]
      user = `getent passwd #{uid}`.split(':')[0]
      list[pid] = [jid,user]
    end
    return list
  end

end

module Temp

  # Returns a list of users with data in /tmp.
  def self.users
    self.parse.values.uniq
  end

  # Returns a list of directories in /tmp belonging to a 
  # given user.
  def self.dirs(user)
    list = Array.new
    parse.each do |dir,usr|
      list << dir if user == usr
    end
    return list
  end

  # Parses the /tmp directory with a depth of one directory level,
  # and returns a list of directories and users. 
  def self.parse
    list = Hash.new
    `ls -d /tmp/* --color=never -oU`.split("\n").each do |line|
      line = line.split(' ')
      user = line[2]
      next if user == 'root'
      dir = line[-1]
      list[dir] = user
    end
    return list
  end

end

begin

  stdin = $stdin.tty? ? String.new : $stdin.read

  options = OpenStruct.new
  options.debug = false
  options.dry_run = false

  $log = Logger.new(STDOUT)
  $log.formatter = proc do |severity, datetime, progname, msg|
      "[#{datetime.strftime("%Y-%m-%d %H:%M:%S")}] #{severity}: #{msg}\n"
  end
  $log.level = Logger::FATAL

  GetoptLong.new(
    ['--dry-run','-d',GetoptLong::NO_ARGUMENT],
    ['--verbose','-v',GetoptLong::NO_ARGUMENT],
    ['--debug','-D',GetoptLong::NO_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--dry-run'
      options.dry_run = true
    when '--verbose'
      $log.level = Logger::INFO
    when '--debug'
      options.debug = true
      $log.level = Logger::DEBUG
    when '--help'
      $stdout.puts HELP
      exit 0
    end
  end
  
  command = ARGV[0] || raise('No command given!')
  case command
  when 'orphan':
    j_users = Gengine::jobs.values.uniq
    $log.info("Users with active job: [#{j_users.sort.join(',')}]")
    g_users = Gengine::users
    $log.info("Users with Processes spawned by GridEngine: [#{g_users.sort.join(',')}]")
    g_users.each do |user|
      Gengine::processes(user).each do |pid,jid|
        # only processes without existing job ID
        unless system("qstat -j #{jid} 2>/dev/null 1>/dev/null")
          $stdout.puts " #{user}:#{pid} (#{jid})"  
          next if options.dry_run
          system("kill -KILL #{pid}")
        end
      end
    end
  when 'temp':
    g_users = Gengine::users
    $log.info("Users with Processes spawned by GridEngine: [#{g_users.sort.join(',')}]")
    candidates = Array.new
    Temp::users.each do |user|
      candidates << user unless g_users.include? user
    end
    $log.info("Candidates with data in /tmp but no jobs: [#{candidates.sort.join(',')}]")
    candidates.each do |user|
      $stdout.puts "Deleting directories of user [#{user}]:"
      Temp::dirs(user).each do |dir|
        $stdout.puts "  #{dir}"
        next if options.dry_run
        system("rm -rf #{dir}")
      end
    end
  else
    $stdout.puts HELP
  end


rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0
