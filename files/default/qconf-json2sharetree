#!/usr/bin/env ruby
#
# Copyright 2012 Victor Penso
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

require 'json'
require 'ostruct'
require 'getoptlong'


exec_name = File.split(__FILE__)[-1]
HELP = <<EOF
Synopsis
========

#{exec_name} 

Transforms a GridEngine sharetree described in
a JSON data structure into the format parsable
by `qconf`.

Usage
-----

#{exec_name} [OPTIONS] [FILE]

FILE: Path to the output file.

Options
-------

--intput, -i PATH
  PAth to the source data file.
--help, -h
  Show this help information.
--debug, -d
  Show stacktraces in case of errors.
EOF

$sharetree_id = 0

def sharetree(data)
  stree = String.new # sharetree 
  ids = Array.new # list of direct descendants 
  data.each do |name,conf|
    type = conf.has_key?('project') ? 1 : 0 # if this is a project
    # nasty global to increment the ID for all descendants
    id = $sharetree_id ; $sharetree_id += 1
    shares = conf['shares']
    # descend into deep subtrees recursively
    buffer = String.new
    if (conf.keys - ['shares','project']).length > 0
      conf.delete('shares')
      conf.delete('project')
      buffer,childs = sharetree(conf)
      # IDs of direct children
      childnodes = childs.join(",")
    else
      childnodes = "NONE"
    end
    ids << id
    stree << "id=#{id}\nname=#{name}\ntype=#{type}\nshares=#{shares}\nchildnodes=#{childnodes}\n"
    # print all descendants after the parent 
    stree << buffer unless buffer.empty?
  end
  return [ stree, ids ]
end

begin

  # read the input stream if it exists
  stdin = String.new
  if not $stdin.tty?
    stdin = $stdin.read
  end

  options = OpenStruct.new
  options.debug = false
  input = String.new
  GetoptLong.new(
    ['--debug','-d',GetoptLong::NO_ARGUMENT],
    ['--input','-i', GetoptLong::REQUIRED_ARGUMENT],
    ['--help','-h',GetoptLong::NO_ARGUMENT]
  ).each do |opt,arg|
    case opt
    when '--debug'
      options.debug = true
    when '--input'
      raise("Source data in #{arg} missing") unless File.exists? arg
      input = File.read(arg)
    when '--help'
      $stdout.puts HELP
      exit 0
    end
  end

  # continue unless input data is missing
  if stdin.empty? and input.empty?
    raise("No input data available!")
  end
  # data from the input pipe is discarded 
  # if more then one input source exists
  input = stdin if input.empty?
  # process the input data
  stree, trash = sharetree(JSON.parse(input))

  case ARGV.length 
  # write to a file
  when 1
    dest = ARGV.shift
    File.open(dest,'w') { |f| f.write stree }
  # print to the terminal
  when 0
    $stdout.puts stree
  else
    raise("Wrong number of arguments")
  end

rescue => exc
  $stderr.puts "ERROR: #{exc.message}"
  $stderr.puts " use -h for detailed instructions"
  if options.debug
    $stderr.puts '-- Stack Trace --'
    $stderr.puts exc.backtrace
  else
    $stderr.puts 'You may want run this in debug mode with \'-d\''
  end
  exit 1
end

exit 0

__END__
